<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[围城]]></title>
  <subtitle><![CDATA[生活不只是柴米油盐，还有诗和远方]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lvshuang.github.io/"/>
  <updated>2015-12-04T03:34:13.000Z</updated>
  <id>http://lvshuang.github.io/</id>
  
  <author>
    <name><![CDATA[围城]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[两张西昌的照片]]></title>
    <link href="http://lvshuang.github.io/2015/12/04/%E4%B8%A4%E5%BC%A0%E8%A5%BF%E6%98%8C%E7%9A%84%E7%85%A7%E7%89%87/"/>
    <id>http://lvshuang.github.io/2015/12/04/两张西昌的照片/</id>
    <published>2015-12-04T03:28:27.000Z</published>
    <updated>2015-12-04T03:34:13.000Z</updated>
    <content type="html"><![CDATA[<p>9月去了躺西昌，留下了一些照片。对西昌的印象一直都是蓝天白云，有点类似云南的天气，就是太阳太毒辣 @_@!!</p>
<h3 id="一辆单车">一辆单车</h3><img src="http://7xow2e.com1.z0.glb.clouddn.com/blogDSC06854.jpg" title="一辆单车">
<h3 id="芦苇荡">芦苇荡</h3><img src="http://7xow2e.com1.z0.glb.clouddn.com/blogDSC06865.jpg" title="一辆单车">
]]></content>
    <summary type="html">
    <![CDATA[<p>9月去了躺西昌，留下了一些照片。对西昌的印象一直都是蓝天白云，有点类似云南的天气，就是太阳太毒辣 @_@!!</p>
<h3 id="一辆单车">一辆单车</h3><img src="http://7xow2e.com1.z0.glb.clouddn.com/blogDSC]]>
    </summary>
    
      <category term="西昌 摄影 生活" scheme="http://lvshuang.github.io/tags/%E8%A5%BF%E6%98%8C-%E6%91%84%E5%BD%B1-%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活 摄影" scheme="http://lvshuang.github.io/categories/%E7%94%9F%E6%B4%BB-%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP进程--PHP创建守护进程]]></title>
    <link href="http://lvshuang.github.io/2015/12/03/PHP%E8%BF%9B%E7%A8%8B-PHP%E5%88%9B%E5%BB%BA%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <id>http://lvshuang.github.io/2015/12/03/PHP进程-PHP创建守护进程/</id>
    <published>2015-12-03T15:14:45.000Z</published>
    <updated>2015-12-04T02:01:29.000Z</updated>
    <content type="html"><![CDATA[<p>随着互联网的发展，以及PHP快速开发的特点，现在越来越来越多的团队将PHP作为服务端的编程语言。今天PHP7发布，PHP7效率大幅提升，相信后面会有更多的团队使用PHP作为后端服务开发的首选语言。</p>
<p>PHP是单线程的，但是使用PCNTL和POSIX等扩展能实现多进程编程，相比于多线程编程，多进程编程要相对容易很多。在使用PHP开发服务端时，很多时候避免不了和多进程打交道，想着边学边写几篇关于PHP服务端开发的系列博客。个人才疏学浅，有疏漏，还请各位看官指正。</p>
<p>今天我们就从PHP创建守护进程开始说起。</p>
<h3 id="PHP创建守护进程">PHP创建守护进程</h3><p>开始之前，请确认已安装扩展pcntl和posix。请使用<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php -m</span><br></pre></td></tr></table></figure></p>
<p>查看相关扩展是否安装，如果已安装，列表应该会显示pcntl和posix两行。</p>
<p>创建守护进程就是让进程脱离终端，独自在后台运行，我们可以让父进程创建一个子进程，然后退出父进程，子进程独自在后台运行，这样就实现了一个守护进程。</p>
<p>创建子进程可以使用pcntl扩展中的pcntl_fork函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是父进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里是子进程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了使子进程获得最大的权限，我们在创建子进程之前可以使用umask函数，避免一些权限问题，具体的umask作用参见：<br><a href="http://stackoverflow.com/questions/12116121/php-umask0-what-is-the-purpose" title="[external] [php umask(0) what is the purpose]" target="_blank" rel="external">php umask(0) what is the purpose</a></p>
<p>fork后，我们需要使用posix_setsid函数使子进程成为session leader。</p>
<p>现在我们的代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是父进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里是子进程</span></span><br><span class="line">    posix_setsid(); <span class="comment">// 使当前进程成为session leader</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在某些情况下，当我们fork一次以后立即退出，并不能保证子进程能够脱离终端，在我们退出终端的时候，仍然能导致子进程终止，服务退出，所以我们需要fork两次以确保这种情况不会发生，stackoverflow上有篇文章解释了为什么fork两次:<br><a href="http://stackoverflow.com/questions/881388/what-is-the-reason-for-performing-a-double-fork-when-creating-a-daemon" title="[external] [What is the reason for performing a double fork when creating a daemon? ]" target="_blank" rel="external">What is the reason for performing a double fork when creating a daemon?</a></p>
<p>fork两次以后，我们的代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是父进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">posix_setsid(); <span class="comment">// 使当前进程成为session leader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是第一个子进程</span></span><br><span class="line"><span class="variable">$pidAgain</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是第一个子进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里是第二个子进程，即最终得到的守护进程</span></span><br><span class="line"><span class="comment">// 在这里处理任务</span></span><br></pre></td></tr></table></figure>
<p>这样我们的守护进程就创建完毕，接下来我们把代码完善下。</p>
<p>我们创建一个Server类，模拟启动一个守护进程，在后台处理任务。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 启动服务.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> void</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;deamon();     <span class="comment">// 守护进程化</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;handleTask(); <span class="comment">// 开始处理任务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 使服务守护进程化.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> void</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">deamon</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        umask(<span class="number">0</span>); <span class="comment">// 为后面的子进程让出最大权限</span></span><br><span class="line">        <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"创建子进程失败"</span> . PHP_EOL);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        posix_setsid(); <span class="comment">// 使当前进程成为session leader</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$pidAgain</span> = pcntl_fork();</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pidAgain</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"再次创建子进程失败"</span> . PHP_EOL);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$pidAgain</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"服务已启动....."</span> . PHP_EOL);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 处理请求.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> void</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">handleTask</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// process task</span></span><br><span class="line">            sleep(<span class="number">2</span>); <span class="comment">// 模拟处理请求</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span> = <span class="keyword">new</span> Server();</span><br><span class="line"><span class="variable">$server</span>-&gt;start(); <span class="comment">// 开始服务</span></span><br></pre></td></tr></table></figure></p>
<p>在终端执行:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>php scriptName.php</span><br></pre></td></tr></table></figure></p>
<p>你会看到如下图所示的提示：<br><img src="http://7xow2e.com1.z0.glb.clouddn.com/15-12-04-1.png" class="[]" title="[运行结果 [运行结果]]"></p>
<p>终端执行:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">ps</span> -ef | <span class="keyword">grep</span> php</span><br></pre></td></tr></table></figure></p>
<p>可以看到在后台运行的守护进程：<br><img src="http://7xow2e.com1.z0.glb.clouddn.com/15-12-04-2.png" class="[]" title="[运行结果 [运行结果]]"></p>
<p>进程就这么在后台运行着？<br>现在我们只有通过shell命令来杀掉它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">kill</span> pid</span><br></pre></td></tr></table></figure>
<p>下次说下怎么管理PHP进程，实现服务的停止和重载。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着互联网的发展，以及PHP快速开发的特点，现在越来越来越多的团队将PHP作为服务端的编程语言。今天PHP7发布，PHP7效率大幅提升，相信后面会有更多的团队使用PHP作为后端服务开发的首选语言。</p>
<p>PHP是单线程的，但是使用PCNTL和POSIX等扩展能实现多]]>
    </summary>
    
      <category term="PHP PHP进程" scheme="http://lvshuang.github.io/tags/PHP-PHP%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="php 技术" scheme="http://lvshuang.github.io/categories/php-%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你好 Hexo]]></title>
    <link href="http://lvshuang.github.io/2015/12/02/hello-world/"/>
    <id>http://lvshuang.github.io/2015/12/02/hello-world/</id>
    <published>2015-12-02T15:21:24.000Z</published>
    <updated>2015-12-02T15:21:24.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="Create_new_page">Create new page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"page name"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hexo 文档" scheme="http://lvshuang.github.io/tags/hexo-%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>
