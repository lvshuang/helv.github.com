<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[围城]]></title>
  <subtitle><![CDATA[生活不只是柴米油盐，还有诗和远方]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lvshuang.github.io/"/>
  <updated>2015-12-12T17:08:57.000Z</updated>
  <id>http://lvshuang.github.io/</id>
  
  <author>
    <name><![CDATA[围城]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PHP进程--进程的同步和互斥]]></title>
    <link href="http://lvshuang.github.io/2015/12/10/PHP%E8%BF%9B%E7%A8%8B-PHP%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://lvshuang.github.io/2015/12/10/PHP进程-PHP进程间通信/</id>
    <published>2015-12-10T15:12:03.000Z</published>
    <updated>2015-12-12T17:08:57.000Z</updated>
    <content type="html"><![CDATA[<p>在使用多进程编程时，避免不了对资源的竞争。比如同时去更新数据库中的一条记录当中的amount(金额)字段，假设原始的值为0.00，此时进程A要把amount的值加100.00，而进程B要将amount的值加50.00，经过两次相加后，我们预期的amount值为150.00。<br>假设进程同时去操作，他们读到的amount都是0.00， 进程A 加100.00后为100.00，进程B加50.00后得到的是50.00，再假设进程A先把数据更新到数据库，此时数据库库中的amount是100.00，而后，进程B在更新记录，数据库中的amount会从100.00更新为50.00，这样就会造成和预期不一致的结果。</p>
<p>为了解决这个问题，我们需要有两种方式：</p>
<ul>
<li>使用锁</li>
<li>保证其中一个先执行，一个后执行</li>
</ul>
<p>使用锁的方式叫进程互斥，保证其中一个先执行就是让后执行的进程等待，先执行的进程执行完成后告诉等待的进程可以执行了，这个就叫进程间同步，这两种方式都可以认为是进程间的通信。</p>
<p>在unix家族中，进程间通信有管道、信号、消息队列和共享内存等几大类。</p>
<h3 id="首先，我们使用php实现一个进程间的互斥锁。">首先，我们使用php实现一个进程间的互斥锁。</h3><p>php有一个 sem_*系列的函数，可以实现进程锁，sem_*系列函数实际操作的是 system V 信号，通过信号实现进程间的互斥锁。</p>
<h4 id="获取一个信号资源">获取一个信号资源</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resource sem_get ( int <span class="variable">$key</span> [, int <span class="variable">$max</span>_acquire = <span class="number">1</span> [, int <span class="variable">$perm</span> = <span class="number">0666</span> [, int <span class="variable">$auto</span>_release = <span class="number">1</span> ]]] )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>key  一个整数，可以是任何值</li>
<li>max_acquire 整数，默认为1， 表示有多少个进程可以同时获得信号，进程锁需要设置为1</li>
<li>perm 权限 使用默认值</li>
<li>是否自动释放资源，使用默认值</li>
</ul>
<p>如果使用同一个key, 多次调用seg_get, 会返回不同的值, 但是返回的所有的值都只想同一个信号资源</p>
<h4 id="使进程占据信号">使进程占据信号</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool sem_acquire ( resource <span class="variable">$sem</span>_identifier [, bool <span class="variable">$nowait</span> = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>sem_identifier 由sem_get返回的资源</li>
<li>nowait 是否不等待进程获占据到信号资源后才返回，设置为false时，如果信号被占据，会一直等待其他进程释放信号后才返回；设置为true时，如果信号被占据，立即返回false; 大多数情况我们使用默认值。</li>
</ul>
<h4 id="释放对信号的占据">释放对信号的占据</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool sem_release ( resource <span class="variable">$sem</span>_identifier )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>sem_identifier 由sem_get返回的资源</li>
</ul>
<h4 id="释放信号资源">释放信号资源</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool sem_release ( resource <span class="variable">$sem</span>_identifier )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>sem_identifier 由sem_get返回的资源</li>
</ul>
<p>现在我们写一个伪代码的例子，模拟多个进程去操作同一资源</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$workCount</span> = <span class="number">10</span>;  <span class="comment">// 进程数量</span></span><br><span class="line"><span class="variable">$workPids</span> = <span class="keyword">array</span>(); <span class="comment">// 保存进程id</span></span><br><span class="line"><span class="variable">$semKey</span> = <span class="number">168</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$publicSource</span> = <span class="string">'some source'</span>;</span><br><span class="line"><span class="variable">$sem</span> = sem_get(<span class="variable">$semKey</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$id</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span> ++) &#123;</span><br><span class="line">    <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">    <span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"fork error"</span> . PHP_EOL);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="number">0</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        <span class="comment">// 实现加锁功能：如果信号被占据，不会立即返回，会等待其他进程释放以后才返回</span></span><br><span class="line">        <span class="variable">$acquire</span> = sem_acquire(<span class="variable">$sem</span>, <span class="keyword">false</span>); </span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$acquire</span>) &#123; <span class="comment">// 锁失败</span></span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"sem_acquire 失败"</span> . PHP_EOL)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$publicSource</span>-&gt;update(); <span class="comment">// 更新公共资源</span></span><br><span class="line">        sem_release(<span class="variable">$sem</span>);  <span class="comment">// 释放锁：更新完成后释放对信号的占据</span></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$workPids</span>[<span class="variable">$pid</span>] = <span class="variable">$pid</span>; <span class="comment">// 保存子进程id</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父进程</span></span><br><span class="line"><span class="comment">// 等待子进程全部操作完毕</span></span><br><span class="line"><span class="variable">$status</span> = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (cout(<span class="variable">$workPids</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$pid</span> = pcntl_wait(<span class="variable">$status</span>); <span class="comment">// 等待子进程退出，主进程会阻塞在这里，当有一个子进程退出时会返回改子进程id</span></span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$workPids</span>[<span class="variable">$pid</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"child &#123;$pid&#125; exit"</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有子进程运行完毕后释放信号资源</span></span><br><span class="line">sem_remove(<span class="variable">$sem</span>);</span><br></pre></td></tr></table></figure>
<h3 id="进程间使用共享内存同步">进程间使用共享内存同步</h3><p>现在我们考虑一个场景，父进程fork一个子进程后，需要由父进程初始化一个资源，等待父进程初始化以后，子进程才能继续操作。由于进程的执行顺序是不确定的，所以我们不能保证子进程运行的时候父进程已经运行完成并且初始化好了资源，这需要由父进程告诉子进程–即进程间同步。</p>
<p>php的shm_*函数可以实现对共享内存的操作</p>
<h4 id="创建共享内存块">创建共享内存块</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resource shm_attach ( int <span class="variable">$key</span> [, int <span class="variable">$memsize</span> [, int <span class="variable">$perm</span> = <span class="number">0666</span> ]] )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>key 任意正整数 共享内存块的id</li>
<li>memsize 正整数 共享内存块的大小 但是byte，如果不提供此参数，则检查php.ini中的配置项sysvshm.init_mem是否存在，存在使用配置的值，不存在则默认10000 bytes</li>
<li>perm 权限 使用默认值</li>
</ul>
<p>函数返回一个共享内存块的资源标识</p>
<h4 id="往共享内存里写入数据">往共享内存里写入数据</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool shm_put_var ( resource <span class="variable">$shm</span>_identifier , int <span class="variable">$variable</span>_key , mixed <span class="variable">$variable</span> )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>shm_identifier 由shm_attach返回的资源标识</li>
<li>variable_key 数据的标识</li>
<li>variable 存入的数据，支持能被函数serialize()序列化的所有值，例如资源或者一些内置的对象，一般情况下，如果是字符串、整形或者boolean这种简单的类型，我们可以直接存入，其他的数据可以使用json_encode或者serialize处理后在存入。</li>
</ul>
<p>写入成功返回true, 否则返回false</p>
<h4 id="获取共享内存中的数据">获取共享内存中的数据</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed shm_get_var ( resource <span class="variable">$shm</span>_identifier , int <span class="variable">$variable</span>_key )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>shm_identifier 由shm_attach返回的资源标识</li>
<li>variable_key 数据的标识</li>
</ul>
<p>返回存入的值</p>
<h4 id="判断数据是否存在共享内存中">判断数据是否存在共享内存中</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool shm_has_var ( resource <span class="variable">$shm</span>_identifier , int <span class="variable">$variable</span>_key )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>shm_identifier 由shm_attach返回的资源标识</li>
<li>variable_key 数据的标识</li>
</ul>
<p>当数据存在于共享内存中时返回true, 否则返回false</p>
<h4 id="销毁共享内存块">销毁共享内存块</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool shm_detach ( resource <span class="variable">$shm</span>_identifier )</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>shm_identifier 由shm_attach返回的资源标识</li>
</ul>
<p>shm_detach总是返回true</p>
<p>了解了这几个函数以后，我们来实开头提到的场景：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$shmKey</span> = <span class="number">8888</span>; <span class="comment">// 共享内存key</span></span><br><span class="line"><span class="variable">$shmSize</span> = <span class="number">1000</span>; <span class="comment">// 共享内存块大小</span></span><br><span class="line"><span class="variable">$initedKey</span> = <span class="string">'inited_key'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$shm</span> = shm_attach(<span class="variable">$shmKey</span>, <span class="variable">$shmKey</span>)) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">"shm attach failed"</span> . PHP_EOL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">"fork error"</span> . PHP_EOL);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="number">0</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 子进程</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; <span class="comment">// 开始循环等待</span></span><br><span class="line">        <span class="keyword">if</span> (!shm_has_var(<span class="variable">$shm</span>, <span class="variable">$initedKey</span>)) &#123; <span class="comment">// 判断inited_key不存在于内存中</span></span><br><span class="line">            sleep(<span class="number">2</span>); <span class="comment">// 停两秒</span></span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 继续等待</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// inited_key 存在于内存中</span></span><br><span class="line">        <span class="variable">$inited</span> = shm_get_var(<span class="variable">$shm</span>, <span class="variable">$initedKey</span>); <span class="comment">// 获取inited_key的值</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"inited_key="</span> . <span class="variable">$inited</span> . PHP_EOL;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 父进程</span></span><br><span class="line"><span class="comment">// 资源初始化中.......................</span></span><br><span class="line"><span class="comment">// 初始化完成，告诉子进程</span></span><br><span class="line"><span class="variable">$tellChild</span> = shm_put_var(<span class="variable">$shm</span>, <span class="variable">$inited</span>, <span class="string">"初始化好了"</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$tellChild</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">"通知子进程（写入内存）失败，需要手动结束子进程"</span> . PHP_EOL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$status</span> = <span class="keyword">null</span>;</span><br><span class="line">pcntl_waitpid(<span class="variable">$pid</span>, <span class="variable">$status</span>);  <span class="comment">// 挂起主进程，等待子进程退出</span></span><br><span class="line"></span><br><span class="line">shm_detach(<span class="variable">$shm</span>); <span class="comment">// 释放共享内存块</span></span><br></pre></td></tr></table></figure></p>
<h3 id="后面的话">后面的话</h3><p>在熟悉了互斥锁和进程间通信后，下篇博客中我们一起实现一个多进程的任务处理系统，这种处理方式已经运用在我司的数据迁移，统计和批量任务等方面</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用多进程编程时，避免不了对资源的竞争。比如同时去更新数据库中的一条记录当中的amount(金额)字段，假设原始的值为0.00，此时进程A要把amount的值加100.00，而进程B要将amount的值加50.00，经过两次相加后，我们预期的amount值为150.00。]]>
    </summary>
    
      <category term="php" scheme="http://lvshuang.github.io/tags/php/"/>
    
      <category term="php进程" scheme="http://lvshuang.github.io/tags/php%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="进程间通信" scheme="http://lvshuang.github.io/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
      <category term="技术" scheme="http://lvshuang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[晨跑时手机拍了两张]]></title>
    <link href="http://lvshuang.github.io/2015/12/06/%E6%99%A8%E8%B7%91%E6%97%B6%E6%89%8B%E6%9C%BA%E6%8B%8D%E4%BA%86%E4%B8%A4%E5%BC%A0/"/>
    <id>http://lvshuang.github.io/2015/12/06/晨跑时手机拍了两张/</id>
    <published>2015-12-06T03:21:25.000Z</published>
    <updated>2015-12-07T10:59:52.000Z</updated>
    <content type="html"><![CDATA[<p>天气不错，在渝北果塘湖跑了会，随手拍了两张湖边的房子。希望老的时候，也能找个有山有水的地方，安详一生。</p>
<img src="http://7xow2e.com1.z0.glb.clouddn.com/blogIMG_0872.jpg">
<img src="http://7xow2e.com1.z0.glb.clouddn.com/blogIMG_0869.jpg">]]></content>
    <summary type="html">
    <![CDATA[<p>天气不错，在渝北果塘湖跑了会，随手拍了两张湖边的房子。希望老的时候，也能找个有山有水的地方，安详一生。</p>
<img src="http://7xow2e.com1.z0.glb.clouddn.com/blogIMG_0872.jpg">
<img src="http]]>
    </summary>
    
      <category term="摄影" scheme="http://lvshuang.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="生活" scheme="http://lvshuang.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="重庆" scheme="http://lvshuang.github.io/tags/%E9%87%8D%E5%BA%86/"/>
    
      <category term="生活" scheme="http://lvshuang.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="摄影" scheme="http://lvshuang.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[两张西昌的照片]]></title>
    <link href="http://lvshuang.github.io/2015/12/04/%E4%B8%A4%E5%BC%A0%E8%A5%BF%E6%98%8C%E7%9A%84%E7%85%A7%E7%89%87/"/>
    <id>http://lvshuang.github.io/2015/12/04/两张西昌的照片/</id>
    <published>2015-12-04T03:28:27.000Z</published>
    <updated>2015-12-07T10:59:55.000Z</updated>
    <content type="html"><![CDATA[<p>9月去了躺西昌，留下了一些照片。对西昌的印象一直都是蓝天白云，有点类似云南的天气，就是太阳太毒辣 @_@!!</p>
<h3 id="一辆单车">一辆单车</h3><img src="http://7xow2e.com1.z0.glb.clouddn.com/blogDSC06854.jpg" title="一辆单车">
<h3 id="芦苇荡">芦苇荡</h3><img src="http://7xow2e.com1.z0.glb.clouddn.com/blogDSC06865.jpg" title="一辆单车">
]]></content>
    <summary type="html">
    <![CDATA[<p>9月去了躺西昌，留下了一些照片。对西昌的印象一直都是蓝天白云，有点类似云南的天气，就是太阳太毒辣 @_@!!</p>
<h3 id="一辆单车">一辆单车</h3><img src="http://7xow2e.com1.z0.glb.clouddn.com/blogDSC]]>
    </summary>
    
      <category term="摄影" scheme="http://lvshuang.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="西昌" scheme="http://lvshuang.github.io/tags/%E8%A5%BF%E6%98%8C/"/>
    
      <category term="摄影" scheme="http://lvshuang.github.io/categories/%E6%91%84%E5%BD%B1/"/>
    
      <category term="生活" scheme="http://lvshuang.github.io/categories/%E6%91%84%E5%BD%B1/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP进程--PHP创建守护进程]]></title>
    <link href="http://lvshuang.github.io/2015/12/03/PHP%E8%BF%9B%E7%A8%8B-PHP%E5%88%9B%E5%BB%BA%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <id>http://lvshuang.github.io/2015/12/03/PHP进程-PHP创建守护进程/</id>
    <published>2015-12-03T15:14:45.000Z</published>
    <updated>2015-12-10T15:11:11.000Z</updated>
    <content type="html"><![CDATA[<p>随着互联网的发展，以及PHP快速开发的特点，现在越来越来越多的团队将PHP作为服务端的编程语言。今天PHP7发布，PHP7效率大幅提升，相信后面会有更多的团队使用PHP作为后端服务开发的首选语言。</p>
<p>PHP是单线程的，但是使用PCNTL和POSIX等扩展能实现多进程编程，相比于多线程编程，多进程编程要相对容易很多。在使用PHP开发服务端时，很多时候避免不了和多进程打交道，想着边学边写几篇关于PHP服务端开发的系列博客。个人才疏学浅，有疏漏，还请各位看官指正。</p>
<p>今天我们就从PHP创建守护进程开始说起。</p>
<h3 id="PHP创建守护进程">PHP创建守护进程</h3><p>开始之前，请确认已安装扩展pcntl和posix。请使用<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php -m</span><br></pre></td></tr></table></figure></p>
<p>查看相关扩展是否安装，如果已安装，列表应该会显示pcntl和posix两行。</p>
<p>创建守护进程就是让进程脱离终端，独自在后台运行，我们可以让父进程创建一个子进程，然后退出父进程，子进程独自在后台运行，这样就实现了一个守护进程。</p>
<p>创建子进程可以使用pcntl扩展中的pcntl_fork函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是父进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里是子进程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了使子进程获得最大的权限，我们在创建子进程之前可以使用umask函数，避免一些权限问题，具体的umask作用参见：<br><a href="http://stackoverflow.com/questions/12116121/php-umask0-what-is-the-purpose" title="[external] [php umask(0) what is the purpose]" target="_blank" rel="external">php umask(0) what is the purpose</a></p>
<p>fork后，我们需要使用posix_setsid函数使子进程成为session leader。</p>
<p>现在我们的代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是父进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里是子进程</span></span><br><span class="line">    posix_setsid(); <span class="comment">// 使当前进程成为session leader</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在某些情况下，当我们fork一次以后立即退出，并不能保证子进程能够脱离终端，在我们退出终端的时候，仍然能导致子进程终止，服务退出，所以我们需要fork两次以确保这种情况不会发生，stackoverflow上有篇文章解释了为什么fork两次:<br><a href="http://stackoverflow.com/questions/881388/what-is-the-reason-for-performing-a-double-fork-when-creating-a-daemon" title="[external] [What is the reason for performing a double fork when creating a daemon? ]" target="_blank" rel="external">What is the reason for performing a double fork when creating a daemon?</a></p>
<p>fork两次以后，我们的代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是父进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">posix_setsid(); <span class="comment">// 使当前进程成为session leader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是第一个子进程</span></span><br><span class="line"><span class="variable">$pidAgain</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建进程失败</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是第二个子进程</span></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里是第二个子进程，即最终得到的守护进程</span></span><br><span class="line"><span class="comment">// 在这里处理任务</span></span><br></pre></td></tr></table></figure>
<p>这样我们的守护进程就创建完毕，接下来我们把代码完善下。</p>
<p>我们创建一个Server类，模拟启动一个守护进程，在后台处理任务。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 启动服务.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> void</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;deamon();     <span class="comment">// 守护进程化</span></span><br><span class="line">        <span class="variable">$this</span>-&gt;handleTask(); <span class="comment">// 开始处理任务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 使服务守护进程化.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> void</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">deamon</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        umask(<span class="number">0</span>); <span class="comment">// 为后面的子进程让出最大权限</span></span><br><span class="line">        <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pid</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"创建子进程失败"</span> . PHP_EOL);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        posix_setsid(); <span class="comment">// 使当前进程成为session leader</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$pidAgain</span> = pcntl_fork();</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> == <span class="variable">$pidAgain</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"再次创建子进程失败"</span> . PHP_EOL);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$pidAgain</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">"服务已启动....."</span> . PHP_EOL);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">    * 处理请求.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@return</span> void</span><br><span class="line">    */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">handleTask</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// process task</span></span><br><span class="line">            sleep(<span class="number">2</span>); <span class="comment">// 模拟处理请求</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span> = <span class="keyword">new</span> Server();</span><br><span class="line"><span class="variable">$server</span>-&gt;start(); <span class="comment">// 开始服务</span></span><br></pre></td></tr></table></figure></p>
<p>在终端执行:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>php scriptName.php</span><br></pre></td></tr></table></figure></p>
<p>你会看到如下图所示的提示：<br><img src="http://7xow2e.com1.z0.glb.clouddn.com/15-12-04-1.png" class="[]" title="[运行结果 [运行结果]]"></p>
<p>终端执行:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">ps</span> -ef | <span class="keyword">grep</span> php</span><br></pre></td></tr></table></figure></p>
<p>可以看到在后台运行的守护进程：<br><img src="http://7xow2e.com1.z0.glb.clouddn.com/15-12-04-2.png" class="[]" title="[运行结果 [运行结果]]"></p>
<p>进程就这么在后台运行着？<br>现在我们只有通过shell命令来杀掉它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">kill</span> pid</span><br></pre></td></tr></table></figure>
<p>下次说下PHP的进程间通信。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着互联网的发展，以及PHP快速开发的特点，现在越来越来越多的团队将PHP作为服务端的编程语言。今天PHP7发布，PHP7效率大幅提升，相信后面会有更多的团队使用PHP作为后端服务开发的首选语言。</p>
<p>PHP是单线程的，但是使用PCNTL和POSIX等扩展能实现多]]>
    </summary>
    
      <category term="php" scheme="http://lvshuang.github.io/tags/php/"/>
    
      <category term="php进程" scheme="http://lvshuang.github.io/tags/php%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="守护进程" scheme="http://lvshuang.github.io/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="技术" scheme="http://lvshuang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你好 Hexo]]></title>
    <link href="http://lvshuang.github.io/2015/12/01/hello-world/"/>
    <id>http://lvshuang.github.io/2015/12/01/hello-world/</id>
    <published>2015-11-30T16:00:00.000Z</published>
    <updated>2015-12-07T10:33:25.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="Create_new_page">Create new page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"page name"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hexo" scheme="http://lvshuang.github.io/tags/hexo/"/>
    
      <category term="文档" scheme="http://lvshuang.github.io/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对多态的理解--状态模式（基于PHP）]]></title>
    <link href="http://lvshuang.github.io/2013/04/12/%E5%AF%B9%E5%A4%9A%E6%80%81%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%88%E5%9F%BA%E4%BA%8EPHP%EF%BC%89/"/>
    <id>http://lvshuang.github.io/2013/04/12/对多态的理解（基于PHP）/</id>
    <published>2013-04-11T16:53:00.000Z</published>
    <updated>2015-12-07T10:59:56.000Z</updated>
    <content type="html"><![CDATA[<p>代码中经常遇到多个if else的情况 ，以前对多态理解只限于了解，并没有真正使用过。今天听老大讲了下，把自己的理解帖出来，一下代码均基于PHP实现，不态了解java的多态机制。</p>
<p>首先，我们以订单作为一个例子，操作一个订单的时候，基本上都要基于订单状态，做出相应操作。我们假设一个订单有一下几种状态：1,created（创建状态，等待工作人员审核），2,authed(审核通过，等待发货)，3,shipped（已发货状态），4,completed(完成状态)。</p>
<p>当用户提交订单后，对订单的操作就有取消，审核，发货，完成等几个操作。假设要对订单进行取消操作，订单状态必须是created和authed状态。要对订单进行审核，订单状态必须是created，要发货，订单状态必须authed，要执行完成操作，订单必须是shipped状态, completed状态的订单，不能执行任何操作。</p>
<p>要执行这些操作，不用多态的情况下，我们的代码里会充斥着许多if else。如果业务逻辑再复杂些，代码中的if else条件会多得让你搞不清楚，或许你当时明白，但是过一两天你再来修改这段代码的时候，90%以上的情况你都需要花很长理一遍。如果是别人维护你的代码，再加上个人写代码的风格不同，别人就需要更长的时间来理解你的代码，这造成了维护成本过高的问题。</p>
<p>现在，假如我们做一个要对订单做一些操作，考虑先面代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span> </span><br><span class="line"><span class="comment">//订单服务接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">(<span class="variable">$id</span>)</span></span>;</span><br><span class="line">    <span class="comment">//订单审核</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">(<span class="variable">$id</span>)</span></span>;</span><br><span class="line">    <span class="comment">//订单发货</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">(<span class="variable">$id</span>)</span></span>;</span><br><span class="line">    <span class="comment">//完成订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">(<span class="variable">$id</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseService</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'created'</span> || <span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'authed'</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Can\'t cancel order(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'cancel'</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'created'</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Can\'t auth order(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'authed'</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'authed'</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Can\'t shipping order(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'shipped'</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'shipped'</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Can\'t complete order(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'completed'</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrderDao()-&gt;findOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$order</span>)) </span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Order does not exist(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码中，除getOrder方法外，结构相似，而且都有if else结构，因为写法的原因else并没有体现出来，如果义务逻辑复杂，会有更多的if else，甚至是if(){} elseif(){} elseif(){}else{}这种复杂的判断语句出现。</p>
<p><strong><em> 现在我们开始使用多态。首先，订单有4个状态，created、authed、shipped和completed，依据这四个状态我们就可以抽象出四种类型的订单（就和人可以抽象成男人和女人一样），我们把依据四个状态抽象出来的订单叫做StatusOrder;</em></strong>现在我们定义一个接口：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StatusOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//订单审核</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//订单发货</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//完成订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们来实现四种不状态的订单类：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseOrder</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$id</span> = (int) <span class="variable">$id</span>;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrderDao()-&gt;findOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$order</span>)) </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Order does not exist(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刚创建的订单，可以执行取消和审核两个操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatedOrder</span> <span class="keyword">extends</span> <span class="title">BaseOrder</span> <span class="keyword">implements</span> <span class="title">StatusOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$order</span>[<span class="string">'id'</span>], <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'cancel'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'authed'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t shipping order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t complete order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已审核的订单，可以执行发货操作和取消操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthedOrder</span> <span class="keyword">extends</span> <span class="title">BaseOrder</span> <span class="keyword">implements</span> <span class="title">StatusOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$order</span>[<span class="string">'id'</span>], <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'authed'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;   </span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t auth order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$order</span>[<span class="string">'id'</span>], <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'shipped'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t complete order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已发货的订单，可以执行完成操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShippedOrder</span> <span class="keyword">extends</span> <span class="title">BaseOrder</span> <span class="keyword">implements</span> <span class="title">StatusOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t cancel order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;   </span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t auth order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t shipping order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$order</span>[<span class="string">'id'</span>], <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'completed'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已完成的订单，什么操作都不能执行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompleteOrder</span> <span class="keyword">extends</span> <span class="title">BaseOrder</span> <span class="keyword">implements</span> <span class="title">StatusOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t cancel order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;   </span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t auth order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t shipping order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Can\'t complete order(id='</span> . <span class="variable">$order</span>[<span class="string">'id'</span>] . <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们在Service层(业务逻辑层)去实现订单操作：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseService</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取某个状态订单类的一个实例，也可以使用一个工厂方法获取</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrderDao()-&gt;findOrder(<span class="variable">$id</span>);</span><br><span class="line">        <span class="comment">//根据数据库字段获取类名，若取出的订单状态为created, 则$statusOrder值为CreatedOrder</span></span><br><span class="line">        <span class="variable">$statusOrder</span> = ucfirst(strtolower(<span class="variable">$order</span>[<span class="string">'status'</span>])).Order;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$statusOrder</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>权限检查</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getStatusOrder(<span class="variable">$id</span>)-&gt;cancelOrder(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>权限检查</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getStatusOrder(<span class="variable">$id</span>)-&gt;authOrder(<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getStatusOrder(<span class="variable">$id</span>)-&gt;shippingOrder(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">completeOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getStatusOrder(<span class="variable">$id</span>)-&gt;completeOrder(<span class="variable">$id</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端调用:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelAction</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//Other operation etc.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;getOrderService()-&gt;cancelOrder(<span class="variable">$id</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shippingAction</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">//Other operation etc.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;getOrderService()-&gt;shippingOrder(<span class="variable">$id</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">        &#125;               </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// etc. ...........................................</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用多态以后，代码变的简洁，消除了相同形式的代码和if语句。service层（业务逻辑层）执行操作的时候不在关心订单所处的状态，不需要判断。同时，如果我们的订单还要加入一个状态，比如审核未通过（authFailed），这时可以对审核未通过的订单做一些操作，如果按照原来的写发，我们还要去考虑原有代码当中的if else语句，例如：要求要审核未通过（authFailed）也可以被取消， 原来写法中的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder(<span class="variable">$id</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'created'</span> || <span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'authed'</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Can\'t cancel order(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'cancel'</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>会变成：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelOrder</span><span class="params">(<span class="variable">$id</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$order</span> = <span class="variable">$this</span>-&gt;getOrder(<span class="variable">$id</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'created'</span> || <span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'authed'</span> || <span class="variable">$order</span>[<span class="string">'status'</span>] != <span class="string">'authFailed'</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$this</span>-&gt;createServiceException(<span class="string">'Can\'t cancel order(id='</span> . <span class="variable">$id</span> . <span class="string">')'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$this</span>-&gt;getOrderDao()-&gt;update(<span class="variable">$id</span>, <span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="string">'cancel'</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果其他操作也涉及到审核失败这个状态，那我们还要修改其他代码。<br><strong><em>使用多态以后，我们添加一个类AuthFailed实现StatusOrder接口，其他代码基本不用修改，就可以实现功能增加，系统可维护性和可扩展性就大大提升。</em></strong></p>
<h3 id="以上代码均为伪代码">以上代码均为伪代码</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>代码中经常遇到多个if else的情况 ，以前对多态理解只限于了解，并没有真正使用过。今天听老大讲了下，把自己的理解帖出来，一下代码均基于PHP实现，不态了解java的多态机制。</p>
<p>首先，我们以订单作为一个例子，操作一个订单的时候，基本上都要基于订单状态，做出相]]>
    </summary>
    
      <category term="php" scheme="http://lvshuang.github.io/tags/php/"/>
    
      <category term="多态" scheme="http://lvshuang.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
      <category term="状态模式" scheme="http://lvshuang.github.io/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://lvshuang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术" scheme="http://lvshuang.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
