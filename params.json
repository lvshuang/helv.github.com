{"name":"golang字符创处理","tagline":"golang字符创处理","body":"####判断字符串是否相等\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n    str := “abcd\"\r\n\r\n    str2 := \"abcd\"\r\n\r\n    if str == str2 {\r\n        fmt.Printf(\"Str1 equals Str2\\n\")\r\n    } else {\r\n        fmt.Printf(\"Str1 NOT equals Str2\\n\")\r\n    }\r\n\r\n}\r\n\r\n#### 获取字符串长度\r\n\r\nYou can try RuneCountInString from the utf8 package.\r\n\r\nreturns the number of runes in p\r\n\r\nthat, as illustrated in this script: the length of \"World\" might be 6 (when written in Chinese: \"世界\"), but its rune count is 2:\r\n\r\n\r\npackage main\r\n\r\nimport \"fmt\"\r\nimport \"unicode/utf8\"\r\n\r\nfunc main() {\r\n    fmt.Println(\"Hello, 世界\", len(\"世界\"), utf8.RuneCountInString(\"世界\"))\r\n}\r\nPhrozen adds in the comments:\r\n\r\n\r\nActually you can do len() over runes by just type casting.\r\nlen([]rune(\"世界\")) will print 2. At leats in Go 1.3.\r\n\r\n### 字符串拼接\r\ns := s1 + s2\r\nstr := \"Beginning of the string \"+\r\n       \"second part of the string\"\r\ns := \"hel\" + \"lo,\"\r\n      s += \"world!\"\r\n      fmt.Println(s) // prints out “hello, world!”\r\n\r\n\r\n### 获取字符串中某个位置的字符\r\nInterpreted string literals are character sequences between double quotes \"\" using the (possibly multi-byte) UTF-8 encoding of individual characters. In UTF-8, ASCII characters are single-byte corresponding to the first 128 Unicode characters. Strings behave like slices of bytes. A rune is an integer value identifying a Unicode code point. Therefore,\r\n\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n    fmt.Println(string(\"Hello\"[1]))              // ASCII only\r\n    fmt.Println(string([]rune(\"Hello, 世界\")[1])) // UTF-8\r\n    fmt.Println(string([]rune(\"Hello, 世界\")[8])) // UTF-8\r\n}\r\n\r\nOutput:\r\ne\r\ne\r\n界\r\n\r\n### 判断字符串是否为空\r\nif  str == “”     { … }  OR\r\nif  len(str) == 0  { ... }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}